{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "dynamicRoutes": [
    {
      "page": "/accounting/Purchases/[id]",
      "regex": "^/accounting/Purchases/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/accounting/Purchases/(?<nxtPid>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/Dashboard",
      "regex": "^/Dashboard(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/Dashboard(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/accounting/Journals",
      "regex": "^/accounting/Journals(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/accounting/Journals(?:/)?$"
    },
    {
      "page": "/accounting/Payroll",
      "regex": "^/accounting/Payroll(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/accounting/Payroll(?:/)?$"
    },
    {
      "page": "/accounting/Purchases",
      "regex": "^/accounting/Purchases(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/accounting/Purchases(?:/)?$"
    },
    {
      "page": "/accounting/Sales",
      "regex": "^/accounting/Sales(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/accounting/Sales(?:/)?$"
    },
    {
      "page": "/accounting/StockControl",
      "regex": "^/accounting/StockControl(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/accounting/StockControl(?:/)?$"
    },
    {
      "page": "/favicon.ico",
      "regex": "^/favicon\\.ico(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/favicon\\.ico(?:/)?$"
    },
    {
      "page": "/insights/Chatbot",
      "regex": "^/insights/Chatbot(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/insights/Chatbot(?:/)?$"
    },
    {
      "page": "/insights/FinancialReports",
      "regex": "^/insights/FinancialReports(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/insights/FinancialReports(?:/)?$"
    },
    {
      "page": "/insights/ManagementReports",
      "regex": "^/insights/ManagementReports(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/insights/ManagementReports(?:/)?$"
    },
    {
      "page": "/settings/AccountCodeMappings",
      "regex": "^/settings/AccountCodeMappings(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/settings/AccountCodeMappings(?:/)?$"
    },
    {
      "page": "/settings/COASync",
      "regex": "^/settings/COASync(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/settings/COASync(?:/)?$"
    },
    {
      "page": "/settings/FranchiseManagement",
      "regex": "^/settings/FranchiseManagement(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/settings/FranchiseManagement(?:/)?$"
    },
    {
      "page": "/settings/Integrations",
      "regex": "^/settings/Integrations(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/settings/Integrations(?:/)?$"
    },
    {
      "page": "/settings/StoreMx",
      "regex": "^/settings/StoreMx(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/settings/StoreMx(?:/)?$"
    },
    {
      "page": "/settings/Subscription",
      "regex": "^/settings/Subscription(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/settings/Subscription(?:/)?$"
    },
    {
      "page": "/settings/Suppliers",
      "regex": "^/settings/Suppliers(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/settings/Suppliers(?:/)?$"
    },
    {
      "page": "/settings/UserManagement",
      "regex": "^/settings/UserManagement(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/settings/UserManagement(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  },
  "rewrites": []
}